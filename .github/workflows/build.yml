name: Build, Test and Push

on:
  workflow_call:
    
    inputs:
      solution_path:
        required: true
        type: string
        description: Path of project for the restore

      coverage_info_file_path:
        required: true
        type: string
        description: Path to coverage file

      docker_file_directory:
        required: true
        type: string
        description: Directory path to docker file

      docker_image_tag:
        required: true
        type: string
        description: Docker tag used for the image

      dotnet_versiosns:
        required: false
        type: string
        default: '6.0.x'
        description: Version of dotnet to be used for build

      include_code_coverage:
        required: false
        type: boolean
        default: true
        description: A flag indicate if the code coverage should be included as part of the build

      do_docker_build_push:
        required: false
        type: boolean
        default: true
        description: A flag to create docker image and push to repository

    secrets:
      code_coverage_token:
        required: true

      docker_login_username:
        required: true

      docker_login_password:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['${{inputs.dotnet_versiosns}}']

    steps:      
      - uses: actions/checkout@v3
        name: Checkout

      - name: Setup .net core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
        name: Cache nuget packages

      - name: Install dependencies
        run: dotnet restore ${{ inputs.solution_path }} --locked-mode

      - name: Build
        run: dotnet build ${{ inputs.solution_path }} --configuration Release --no-restore

      - name: Test with code coverage
        if: ${{ inputs.include_code_coverage }}
        run: dotnet test ${{ inputs.solution_path }} --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov

      - name: Test without code coverage
        if: false == ${{ inputs.include_code_coverage }}
        run: dotnet test ${{ inputs.solution_path }} --no-restore --verbosity normal

      - name: Publish coverage report to coveralls.io
        if: ${{ inputs.include_code_coverage }}  
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.code_coverage_token }} 
          path-to-lcov: ${{ inputs.coverage_info_file_path }} 

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_login_username }}
          password: ${{ secrets.docker_login_password }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.docker_file_directory }}
          push: true
          tags: ${{ secrets.docker_login_username }}/pipeline-demo:${{ inputs.docker_image_tag }}

